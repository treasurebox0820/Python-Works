　	挨拶、GitButの説明
Gitの共有General channel、GitButとのページ、さいんいんのぼたん、
山口さんコード共有してくれました。ありがたい、Gitに自分の作品をアップロードして、
ようどうでこーどのせいさくをおこなえるように、講義の後半のほうで体験、
今の時点ではアップロードしたものを見れればいい、来月の頭くらいに、Gitを使いこなすための、講習があります、集中講義、
湊川さん、二期生向けにその講義、コードをみせてもらうと、やまぐちさんありがとうございます。

　	教室の話、
７の５一日中とってるので、キリのよいところで戻ります、終了時に机を戻す、
今週の予定、データベースとWeb基礎



	データベースの講義
環境構築、
データベース、
DDK、
DML、
表結合、
仮想テーブル
MYSQLをDL、

　	データベースの概要、
DDKとDML、票結合、仮想テーブル、


　	MySQLのダウンロード
MySQLを導入しなければいけない、このサイトにアクセスしましょう、
６４番ががないので３２番をダウンロード、
トラップに注意、提供Oracle、有料サービスを使わせようとするので、そういうところにいかないように
わからないことをわからないで終わらせないで、しっかりと言語化することが、大事、モデルを継承する（隣から聞こえてきた）
いろんな企業がファイヤーウォール、ポートをあててもらう管理者の手をわずらわせる、いっきにだうんろーどすれば、いつでもネットワークができるのを
ぜんていにしたいんすとーらーだとしごとがすすまないことがあります、そういうのをこうりょしてわけてある



	データベースとは？永続化とは？
データを永続化するためのシステム、データの入出力をメモリ上に保持したり、discに保存したり
システムをダウンさせたり、接続を切断したりしても、次回アクセス時にデータを保持することができるしくみをデータの永続化と呼ぶ、
ファイルによぶ、データを永続化するという、しないとどうなるか、メインメモリー、一時保管をして処理を行う、電源が落ちると、消えてしまう
バッテリーが入っていて、蓋閉じてもメモリ上に残ってるデータが保持されてる、スマホ、スリープ状態、保持されてて、画面操作するえば前の状態で使える
メインメモリに保持されてる、電源を落とさなければ、事故で落とす、データが失われる、非常なリスク
それを保存できる仕組みが必要、日々の簡易的なことであればファイルの保存はわかりやすくて、扱いやすい、
業務レベルでやりたいときにデータベースデータベースは永続化の手段、
それを整理、抽出、高度な分析が可能、スペシャリストになるとそれだけで需要がある、データベースのデータをあつかうためのソフトウェア




	RBD（ Relational DataBase）
複数の表た時、つくった表の間に関係性を持たせる。（ここでなぜかプロジェクタが裏移り）


	DDL（Data Definition Language）
データを抽出したりする言語がある、ふつうのプログラミング言語とは違う。


	Create,Drop,Alter,Truncate
新しいデータベースオブジェクトの作成、
既存のデータベースオブジェクト削除、
既存のデータベースオブジェクト変更、
テーブル内のデータ全体の削除

	データベースの構築という作業、
テーブル定義、
テーブルにデータを登録、
作ったテーブル一つ一つに登録する
データベースの操作をするにはコマンドを覚える必要がる

	RBDのコマンドのことをSQLという。


	データベースを学ぶ上で必要な単語
テーブル/マスタ、：列と行から表を表す一単位
フィールド：行や列の項目名
キー：データを特定するためユニークデータ、特徴的なデータ



表で親しんでるのはエクセル、あれのイメージです、行のひとつひとつがフィールド、
会話するときにフィールドがいくつあるかは、エクセルをイメージする
データを特定するためのユニークデータ、列のことだとおもってください

	DDLで使用するSQLはいかのとおりです（ＳＱＬはＲＢＤのコマンドのこと）
Crate database,データベースを作成できます、
 drop database,データベースを削除できます、
create table,データベースにひょうをさくせいできます
droptable、表及びデータを削除できます
 , alter table,、テーブルの定義を変更できます、
rename table, テーブル名を変更できます、
 create view,ビューを作成できます、
 drop view,ビューを削除できます、
 create trigger,データベース・トリガーを作成できます、
drop triggerデータベース・トリガーを削除できます。

データベースはマネージャーレベルが使っている、下っ端レベルでも理解できてたほうがいい、

	DDLについて
crate database テーブル名[default character set 文字コード];
create database testdv deafault character set utf8;


	utf8の話
こいつらは基本構文、文字構文、文字コード、アスキーを昔をつかわれていた、アルファベットと数字を使って、半角の英数、特殊記号
コンピューターがいろんな国で使われるようになって、ヨーロッパは国によってアクセント記号、違う慣習、違う記号の文字
いろいろな国の言葉をを扱えるように拡張、半角の文字で全部表すのは限界、特に漢字とか、半角じゃなくて全角、２バイトの学習データ、半角２つで文字を扱う
全角文字への拡張、コンピューター世界３つの規格、
ジス、シフトジス、もうひとつなんか、
この三種類は歴史と経緯、力を持ってる会社の思惑
いろいろあって、存在していたが、Webの世界で混在していると文字化けが起きる、utf8をスタンダードしようとという動き
全世界の文字を統一的に扱える、アジア、アラビア語、答えが、文字の文化、棒をならべたりして、石の上にちょうこくみたいにかいて
ある段階で紙を使う文化が普及、アジアは縦書きの文化、ヨーロッパは横書き、アラブは石に書く、石は右から削っていったから、右から書くようになった
utf8ウェブアプリを使う場合は、これ使ってれば間違えない
古いウェブサイトを扱うときは要注意、シフトジス、Windowsのデフォルト、cp932に日本語で書くとhtmlを書いて開くと文字化けしたりする
そういうときもutf8メモ帳でも保存できるから注意する、片隅に知識があれば、あとで思い出させてあげる、伊藤さんはしごとで文字化けがしょっちゅうあった


	2時間目
データベース構文、権限を変更する構文
データベース定義構文、ネットワークからのアクセスを受け付ける、ユーザーによってどこまで変更を許可するか、
grant all privileges on データベース名.権限toユーザー名＠ホスト identified by　'パスワード';
grant all privilegs on testdb.* to testuser@localhost identified by '12345678';

構築されたデータベースは以下のコマンドで確認ができます。
show databases;



＊は全部って意味でこの場合使っている

下が例になっていてtestuserというの自分で作る。Createuserで作ります。localhostは今使ってるマシーンを表すネット上のアドレス
アプリに対して一つ作る、クリエイトデータベースでテーブルを作って、権限を与える動作、ユーザーを一つ作る、データベースにアクセスする
アプリにユーザー名とパスワードを登録する、アプリからアクセスさせるように設定、データベースには特権ユーザーがあって、
それでなんでもできるんだが、特権ユーザー間違えると大事なもの消しちゃう、特権を持ってないユーザーに
構築したデータベースはshowdatabases; で確認できる。

localhost
create database

データベースを削除
drop database データベース名；
drop database testdb；
show databasesコマンドで削除されているか確認しましょう。
ここはインストールで来てからどうさ確認します

DDL
キーについての、テーブル＝マスタ、
フィールド、
キー
社員マスタ、社員ID、氏名、電話番号、所属ID、生年月日、縦に並ぶ列が何を表しているかを表す
社員マスタ、表、テーブルに置き換えても同じ意味、それらの特徴を１フィールドずつ持ってる
所属マスタというひょうがあったとします、所属IDと部署名、所属IDと関連させることで、表示させることができる要因ある
これがRDBの使われ方、キーを紐づけて接続（リレーション）をおこなって、データベースを構築


プライマリキーとは、異なるテーブルの接合性を保ちながら、接続するキーとなるフィールド情報です。キーはテーブル上に複数指定することができる。

キー：データを特定するためユニークデータ、特徴的なデータ

所属IDは全部違う番号で割り当てて使う、全部が違う唯一のものがプライマリーキーになりうるというか設定します。
（会員番号、電話番号とかが相当）
例えば日常的に使うものでプライマリになりうるのはメールアドレス、時間軸をずらすとなりたたないことがある、時期をずらすと別のところにとどくことがある
携帯電話の電話番号もそう、携帯も枯渇が心配されている、一回解約してまた番号をもらったりがおこってると、昔は別で使われて立ったことがあったりする

DDL キー、テーブル、マスタ、フィールド
RDB：Realational DataBase

テーブルを作成する構文
create table テーブル名(
フィールド名　型　[auto_increment] [not null];
フィールド名　型　[not null]
・
・
・
[constraint キー名　primary key (プライマリキー)]
);





	データベース定義例文
create table User(
user_id int(11) auto_increment not null,
user_nameVARCHAR(32),
user_old int(16)
constraint Test_PKC primary key (user_id)
);
３２以上の大きさのデータをいれると３２までカットして入る。（3行目）
user_old　年齢を表そうと定義している。int型の１６桁で表そうしている。（4行目）
constarint Test・・・・・user_idをプライマリキーにするのが宣言されている。
auto_increment not null：絶対なくてはならないことを示す。nullが入ることを許さない。
プライマリキーを設定するということではセットで覚える。
この書き方はどっちかを省略しても構わないという意味、ほかのフィールドもｎot nullと書くこともできるが、省略しても構わない
覚えることがいっぱいなんでノートにタイプしてもらうようなことになってますけど、

/*
constrain=制約
*/



３時間目
	ＭｙＳＱＬのＤＬ
私もみなさん同じ立場でやってみようと思いますので、ソフトウェアをを作るための環境も重い
こういう仕事だけでも専門でやる価値のある仕事だったりする、開発環境構築、インフラエンジニアがやってくれる、
開発に必要なPC全員の分をセットアップして渡してくれる、私のほうは
いま私のほうはそうふとをあんいんすとーるすることころからやっています
こういうのはプログラミングになんの関係ないのですが、前提としてしってるよね、職業にしようという気持ちがある人は当然
知らなければいけないことだとおもってソフトのインストールは習熟してください、ほかのソフトでも似たような感じになってるので
勘所がわかるようになってきます、Windowはこう、アップルはこうLinuxはこうみたいなかんじかわかってくる、
この講義ではWindowsの環境でやっているが仕事でやってると様々、モダンなところはマック使う人多い、個人にせんたくがゆるされるひとはまっくのひとがおおい
現場で指定される場合もありますね、
僕の状態はアプリのアンインストーらーで消せるものは全部けしました、データだけは残ってることはありえます
みなさんと同じ土俵にたってやってみます、かきおこしかきおこしかきおこし
My sql root password
LifeIs2Study!
tesuser
LifeIs2Study!


結局5人中２人しかＤＬできませんでした。


４時間目
/*
データベース、テーブル、表、行、インフラエンジニア、プライマリキー
環境構築、データベース、DDK、DML、表結合、仮想テーブル
MYSQLをDL、データベースの概要、DDKとDML、票結合、仮想テーブル、
環境構築、インストール、MySQL、
*/

	データベースの設計
講義の順番を変えます、先にデータベースの設計から
データベース設計しゅおふ
正規化
DB設計書制作、ツール


データベースは基礎土台、立派なプログラムは土台が脆弱だとだめ！
データベース設計はくみ上げるうちに徐々に複雑なものになってきます。
最終的な結果ですべてをやりなおすようなな結果ににならないように、一定の手順で作成していく手法があります
その手法のひとつが正規化

DBの例、
非正規形
列の中に同じような値が複数回登場するような表
CSVのような状態、CSV、注文番号、注文日、ユーザーBが二回、くりかえし同じユーザーが登場、発送先住所、テーブル名購入履歴
お客さんが購入したものがデータになっている、送料区分、商品名、単価、商品の種類で単価がきまってる
数量、最後合計金額、合計金額、パターンとしては繰り返し、３つ、二番目は一つ、三番目は二つ、四番目は一つ、
ネットの購買のサイトでこういうかたちでできてるのが想像できる、非正規形というのはなにかというと、
横に繰り返しがあるやつを非正規形という、


/*
csv:文字列とコンマだけのファイル。
*/

第一正規化
これを正規化していく、右のやつを一続きの要素にして縦に並べる、左側の重複を許す、こういう形です
注文番号１のものが3つあって、番号２のところ商品は一個だけ、番号３のところは２つ、四番は１つ
全部空白がいないように並べる、３つ分で合計、注文番号と紐づいている、合計金額は注文番号と紐づいている
空欄がない状態に書くことを第一正規化をするという、第一正規化をした結果第一正規形になった

第一正規化
第一正規形

、

第二正規化、第二正規形
重複を除く、左側のテーブルは注文番号一個づつに割り当てられている、右側は購入履歴明細、注文番号と商品名、
重複がないようにみえるが右側は注文番号について重複、左はユーザー名とについて重複
さらに分解して、重複しているところを別の表にまとめなおす、




第三正規化
ユーザーデータという表を新しく作る、ユーザーデータっていうのがユーザーＡＢＣとあって、３つの列だけでみると
必ずユーザーＢのとき住所Ｂ、ユーザーデータのキーを使ってこれを表す？
ユーザーデータ、分類してみて、さらにその中にその他とか離島というのがある、送料区分コードをつくって番号で指定、表を分解することができます。
こういう操作を経て、表を分解していくという操作が正規化という操作になります。



ワークを一つやります。今説明したことを理解するのために。
LibreOffice
非正規形のデータがあるんですが、これを手で入力、
こういう作業になれていることはプログラミングの際に非常に役に立ちます。
あなたは武士きらきらぶし、あなただけに光ってほしい、忘れてしまいたいことが、

横方向の繰り返しをなくして縦に並べた。（第一）

第二正規形
注文番号と
二つ目のグラフは注文番号、商品名

複数現れた注文番号を右側の表にかいている、商品名のところは何回も繰り返している

表を一つにしてど重複を許す第一
第二は商品名、単価、数量、をなんとかする
注文番号との関係性だけ右の表は残している
初めからある重複を取り除くのが第三、ユーザー、その他、商品が決まれば単価が決まる、関係性がわかるように

ユーザー名をプライマリーキーにすればいい、一対一対応は消してよい。
別の表のプライマリーキーで表すことができたら正規化は住んでいる。


第一正規化で重複OKな形で一つの表にする
第二正規化で繰り返しの原因になってたやつとそうでないやつをわける
第三で、もともと重複になってたやつをわける。



わーーーーーーく
ERDの作成
テーブルの作成
テストデータの作成
２，３人組でデータベースを作成します。回登録や購買履歴、売れ筋ランキングがあるカートありのECサイトの非正規形データを作成してください


6限目
集計という機能がSQLでできるのだが、まだ説明してないので、
データがたまっていく順番にかく、時系列順にデータができる、にばんめひとは、きたじゅんにばんごうをつけていきますよ、こうにゅうりれき、


主キー
非キー属性

