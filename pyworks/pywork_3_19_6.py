"""
問題@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
（時間が余ったら）上記のプログラムの吉が出やすく大吉と凶が出にくいことを検証してください。
問題@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



検証の方針@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
たくさんリストに結果を詰め込んで、リストの要素数で割ってやれば確率がでるだろう。
random.choicesは３つ引数がとれる。そして一番最後だけキーワード引数k
kはリストにいれる要素の数を指定している。デフォルトは１。

jにはなるべく大きい数をいれる。ただあまり大きすぎると処理に時間がかかるので注意。


weightsとcum weightsの違いはなんだ

検証の方針@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

検証って何？@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
検証の意味をかんがえる。
検証するってことは、実際プログラムが上手く動いているかどうか.
そうか、実際に確率で表すことができたらいいんじゃないか？

for文はまだ使えない。とすると使えるのはifかリストとか、シークエンス系の型のメソッド
いや、randomに何かそういうメソッドがあるのかもしれない、まず、それにあたってみるか。

getstate使えないかな？
countととか使えないかな？カウント使えるやないか！
検証って何？@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
"""
import random

fortune = ["大吉","中吉","吉","小吉","凶"]
j =1000000
dore = random.choices(fortune,[1,2,4,2,1],k=j)


print("大吉の確率は",(dore.count("大吉")/j)*100,"%")
print("中吉の確率は",(dore.count("中吉")/j)*100,"%")
print("吉の確率は",(dore.count("吉")/j)*100,"%")
print("小吉の確率は",(dore.count("小吉")/j)*100,"%")
print("凶の確率は",(dore.count("凶")/j)*100,"%")




#print("あなたの今年は！",dore,"です！")


